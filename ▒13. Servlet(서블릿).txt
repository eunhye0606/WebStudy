■■■ Servlet(서블릿) ■■■

0. 웹 어플리케이션을 구축하기 위한 웹 프로그램을 구성하는 언어의 한 종류.
  (JAVA 기반)

1. JSP 에서 정적인 부분을 담당하고, Servlet에서는 동적인 처리를 위한
   부분으로 사용되어 보다 효율적인 웹 어플리케이션을 구축할 수 있다.
   - JSP → 단점. MVC 패턴을 적용하기 힘들다.
   - Servlet → 단점. 웹 페이지(view) 작성이 번거롭고 복잡하다.(불편)
   - Servlet + JSP → MVC 패턴 적용 및 웹 페이지(view)를 보다 편리하게 작성.
   		      단점. 구조가 복잡해지게 된다.

2. JSP 는 내부적으로 Web Container 가 Sevlet 으로 변경시켜준다.

3. WEB-INF 는 환경 설정 파일이 저장되는 곳
   (→ 외부에서는 접근 불가 / 금지
       WebContent 안에 WEB-INF가 있어도 마찬가지) check
   - lib : 라이브러리 파일을 저장(ojdbc6.jar, jstl.jar 등)
   - J2SE (SE 기반)
   - J2EE (EE 기반)
   - classes : class 파일이 저장(servlet)
     『classes > com > util > MyUtil.class』
     원래는 이렇게 만들어야 하지만 이클립스가 자동으로 연결
     실제 위치는
     『C:\WebStudy\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost\WebApp20\org\apache\jsp』
     *.jar : java	//java만 모아둠.
     * war : web(프로젝트 아래 모든 것을 압축할 때)
     *.ear : jar + war
     web.xml : context path 의 환경 설정

4. 『init()』과 『destroy()』는 단 한 번 호출되며
   『service()』는 클라이언트의 요청이 있을 때 마다 호출된다.
   이제는 JSP 를 『service()』메소드 내부에 코딩하는 것과 같다.

5. 『GenericServlet』 이나 『HttpServlet』을 활용한다.

6. URL 패턴을 지정하는 방법은 크게 3가지이다.
web.xml에 어떤 요청이 들어왔을 때, 분기 처리 방식 어떻게 처리해 ~ 라 ~ 뭐시기 
   - 『/a』
   - 『/*』
   - 『.do』    (ex. .naver 우리는 임의로 이걸 컨트롤 할 수 있다. web.xml에 자비스.naver 요청이 들어오면 우짜겠다 써두면 됨. URI > URL URI은 URL보다 큰개념. )

7. web.xml 을 수정하면 서버를 꼭 재구동한 이후에 실행해야 한다.
   배치기술서..

8. 지금까지는
   JSP(입력) → JSP(처리, 결과) 였으나
   Servlet 을 다루게 된 이후에는
   JSP(입력) → Servlet(결과를 위한 처리) → JSP(결과) 방식으로 구성된다. → MVC 패턴 control 개념은 아직 포함 안된..



------------------------------------------------------------------------------------------------------------------------

○ Servlet 실습 (WebApp21)

   - Test1.java
   - web.xml

   - 사용자 최초 요청 페이지
     http://localhost:8090/WebApp21/test1















































