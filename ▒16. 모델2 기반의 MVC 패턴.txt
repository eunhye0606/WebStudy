■■■ 모델2 기반의 MVC 패턴 ■■■

우리가 공부하는게 스프링mvc다 하면 수업 거의 끝난겨 ~ 
IT에서 공식 == 디자인 패턴

○ 개요

   (MVC 패턴 : 이렇게 나누는게 가장 좋다라는 공식
               모델, 뷰는 반드시 있어야함.
               옛날에는 모델, 뷰로만 만듬. 컨트롤러없이.
               레스토랑 예시 : 모델 - 주방장 / 뷰 - 홀서빙알바
                               운영하는 사람 입장에선 주방장이 존나 중요
                               핵심은 기간임. 알바는 자주 바뀜.
               컨트롤러없이 모델/뷰로만 만들면 뷰는 자주바뀌는데 업무로직(모델)은 바꾸려면
               비용이나 리소스 소모 커. 근데 모델 - 뷰를 맨날 만나게 해줬더니 
               둘이 눈맞아 ~ 뷰가 바뀌는데 모델도 같이 바뀔라해 그래서 컨트롤러로 둘을 못만나게해)

   Controller 의 1차적인 목적 : 모델 - 뷰가 만나지 못하게 한다.
 
   여태까지는 주소가 /...jsp였다 : 클라이언트의 요청에 따라 바로바로 jsp 줌(클라이언트가 뷰를 가져가)
   MVC 패턴은 이걸 하지않아. 컨트롤러에게 요청하면 컨트롤러가 보내줌!	   (클라이언트의 요청을 컨트롤러가)

   
   MVC 패턴을 써야하는 가장 큰 이유!! 두가지 ! 그래서 C 패턴이라 불릴정도로 컨트롤러가 쥔공 ~ ㅋ
   1. 모델 - 뷰 못만나게 한다.(둘은 라이프사이클이 다르다.) 분리한다. → 컨트롤러의 목적 가장큰 첫번째.
   2. 뷰(클라이언트와 만나는 페이지)를 클라이언트가 직접 데려가는게 아니라 컨트롤러가 검토해서 뷰 출동시키는 구조
   (필수적인 계층은 모델 뷰, 안필수는 컨트롤러)


   MVC 패턴에서 MVC 는 각각 Model, View, Controller 를 의미하는 것으로
   Model 은 데이터 또는 기본 기능(업무 로직)을 말하며,
   View 는 유저 인터페이스를 말한다.
   이 두 가지는 시스템 개발에 있어서 반드시 필요한 부분이다.

   MVC 패턴은 C 패턴이라고 불러도 괜찮을만큼
   한 마디로 말해 Controller 라는 레이어 계층을 두는 것이 가장 중요하다.
   즉, Graphical User Interface 를 활용하는 과정에서
   Model 과 View 계층 사이에
   Controller 계층을 만들어 사용할 수 있도록 하는 것이다.

   이렇게 필수적인 두 계층 사이에
   필수적이지 않은 다른 계층을 두는 이유는
   두 계층(Mode 과 View)이 직접적으로 결합되는 것을 막는 것으로
   Controller 계층은 Model 계층과 View 계층 사이에서 결합을 막아준다.
   Model 과 View 의 직접적인 결합은 이 둘을 함께 바뀌도록 만들어 버린다.
   이것을 Controller 계층이 막아준다는 것이다.
   따라서... Controller 계층의 로직은 매우 간단하게 설계해야 한다.

○ Web Application 에서의 MVC 구조

   JSP 는 로직과 프리젠테이션을 알맞게 구분하기 위해
   Model2 구조를 지원하고 있으며
   Model2 구조의 개념과 구현 방법, 장단점 등을 이해하고
   적용시키는 것이 중요하다

   - Model1 구조(MVC1 / MVC2 라는 말은 없습니다~ MVC는 하나, jsp만 가지고 짠 구조를 Model1)

	Model1과 Model2는 모두 MVC 패턴인가?

     모델1 구조는 일반적으로 JSP 페이지만으로 구성되어 있는 구조를 말한다.
     즉, JSP 페이지에서 동적인 부분(로직 부분)은 스크립트릿으로 처리하고
     그 외 나머지 부분은 템플릿으로 처리하는 구조인 것이다.
     모델1과 모델2의 가장 큰 차이점은
     클라이언트의 요청이 진입하는 지점이 다르다는 것이다.
     (모델1구조에서 클라이언트의 요청이 진입하는 지점 → View(jsp)
      모델2구조는 Controll )

     ·장점
       개발 시간이 단축된다.
       단순한 페이지의 흐름을 바탕으로 MVC 구조에 대한
       추가적인 이해가 필요하지 않다.

     ·단점
       HTML, Javascript, JSP 로직이 한 페이지에 작성되어
       어플리케이션이 복잡해질수록 유지보수가 힘들어진다. (거의 불가능)
       디자이너와 개발자 사이에 밀접하고 원활한 소통이 요구된다.

   - Model2 구조
     모델2 구조는 JSP 와 Servlet 그리고 JavaBean 컴포넌트를 함께 사용하며,
     모델2의 클라이언트의 진입하는 지점은 컨트롤러이며,(컨트롤러는 하는일이없다. 얘때메 빡칠것이다)
     대부분의 웹 어플리케이션의 컨트롤러는 Servlet 이 담당한다.

     ·장점
     로직과 프레젠테이션의 분리로 인해 어플리케이션이 명료해지고
     유지보수나 확장이 용이하다.
     디자이너와의 작업이 분리되어 있기 때문에
     업무 진행이 원활(?)하고 책임의 소재가 명확하다.
                           ------------------ 

     ·단점
     개발 초기에 아키텍처 디자인을 위한 분석...구성...등의
     시간 소요로 개발 기간이 전체적으로 늘어난다.
     MVC 구조에 대한 개발자들의 이해를 필요로 하며,
     이에 대한 이유로 사전 교육 기간 등이 소요될 수 있다.
     (현재는 MVC 패턴을 모르는 개발자는 없다.)

※ MVC(Model2) 구조
   
   - 모델(Model)
     비즈니스 로직과 관련된 부분만 처리
     데이터베이스 관련 로직 구현
     Java Beans

   - 뷰(View)
     사용자에게 알맞은 화면을 보여주는 역할을 수행
     JSP

   - 컨트롤러(Controller)
     어플리케이션의 흐림 제어나 사용자의 요청 구현
     사용자 인증, 보안 설정, 전체 어플리케이션에 공통으로 영향을 주는 요소 구현
     사용자의 요청에 대해 알맞은 모델 사용
     사용자에게 보여줄 뷰 선택
     Servlet


※ MVC(Model2) 구현
   
   - JSP 기반의 웹 어플리케이션에서 Controller 에 포함되어야 할 작업
     ·웹브라우저(클라이언트)의 요청을 받는다.
     ·웹브라우저(클라이언트)가 요구하는 작업을 분석한다.
     ·요청한 작업을 처리하는 비즈니스 로직을 수행하는
       모델(Model:JavaBean)을 사용한다.
     ·처리 결과를 request 또는 session 에 저장한다.
     ·적절한 뷰(View:JSP)를 선택하여
       해당 뷰로 포워딩(forwarding)한다.


   - JSP 기반의 웹 어플리케이션에서 View 에 포함되어야 할 작업
     ·서블릿에서 dispatcher.forward(request, response) 로
       해당 JSP 페이지와 request, response 를 공유한 경우
       해당 JSP 페이지에서 request.getAttribute("result")와 같이
       사용하여 결과를 화면에 표현한다.


   - JSP 기반의 웹 어플리케이션에서 Model 에 포함되어야 할 작업
     ·컨트롤러(Controller)의 요청을 받는다.
     ·비즈니스 로직을 처리한다.
     ·처리한 비즈니스 로직의 결과를 컨트롤러(Controller)로 반환한다.



--------------------------------------------------------------------------

○ MVC 관련 실습 1
- prj : WebApp24
  
  ·web.xml		→ URL 매핑
  ·MVCBegin.java 	→ Controller 역할 (서블릿 클래스)
  ·MVCBegin.jsp	→ View 역할 (JSP 페이지)

- 사용자 최초 요청 주소
http://localhost:8090/WebApp24/mvcbegin
                               --------
                               컨트롤러


webcontent > New > file > 저 주소이름으로 예를 들면 (mvcbegin)을 만들면 그걸 c + 11 하면 바로 열린다
하는 이유 : 주소를 한땀 한땀 치는거 귀찮아서.


○ MVC 관련 실습 2
- prj : WebApp25
  
  ·web.xml		→ URL 매핑
  ·MVCTest01.java 	→ Controller 역할 (서블릿 클래스)
  ·MVCTest01.jsp	→ View 역할 (JSP 페이지)

- 사용자 최초 요청 주소
http://localhost:8090/WebApp25/mvctest01
                               --------
                               컨트롤러

○ MVC 관련 실습 3
- prj : WebApp25
  
  ·web.xml		→ URL 매핑
  ·MVCTest02.java 	→ Controller 역할 (서블릿 클래스)
  ·MVCTest02.jsp	→ View 역할 (JSP 페이지)
  ·MVCTest02Model.jsp	→ Model 역할 (일반 자바 클래스)

- 사용자 최초 요청 주소
http://localhost:8090/WebApp25/mvctest02




------------------------------------------------------
○ 폼(form) 데이터 전송 및 수신 과정 비교

   ※ MVC 패턴 적용 이전 단계와 MVC 패턴 적용 이후 단계를
      반드시 비교하여 이해할 수 있도록 할 것.

   - A
     · prj : WebApp26

     · HelloSend01.html
     · HelloReceive01.jsp

     · 사용자 최초 요청 주소
     · http://location:8090/WebApp26/HelloSend01.html

   - B
     · prj : WebApp27

     · HelloSend02.html
     · HelloReceive02.java
     · web.xml

     · 사용자 최초 요청 주소
     · http://location:8090/WebApp27/HelloSend02.html

   - C
     · prj : WebApp28

     · HelloSend03.html
     · HelloSend03Controller.html
     · HelloReceive03Controller.java
     · HelloReceive03Model.java
     · HelloReceive03.jsp
     · web.xml

     · 사용자 최초 요청 주소
     · http://location:8090/WebApp28/hello

     






























































